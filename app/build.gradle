apply plugin: 'com.android.application'
apply from: "$rootDir/dependencies.gradle"
apply from: "$rootDir/config.gradle"

android {
    defaultConfig {
        applicationId "com.example.androidsample"
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("long", "NETWORK_TIMEOUT_MILLIS", "10_000")
        buildConfigField("long", "CONNECT_TIMEOUT_MILLIS", "30_000")
        buildConfigField "String", 'BASE_URL', "\"http://test.url\""
    }

    signingConfigs {

        release {
            def releaseKeyFile = new File("$rootDir/keys/release.keystore")
            storeFile releaseKeyFile
            storePassword 'android'
            keyAlias 'androidreleasekey'
            keyPassword 'android'
        }

        debug {
            def debugKeyFile = new File("$rootDir/keys/debug.keystore")
            storeFile debugKeyFile
            keyAlias 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        prod {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        dev {
            applicationIdSuffix = ".dev"
            versionNameSuffix "-dev"
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkName = applicationId + "-" + variant.versionName + ".apk"
            def relativeRootDir = output.packageApplication.outputDirectory.toPath()
                    .relativize(rootDir.toPath()).toFile()
            output.outputFileName = new File("$relativeRootDir/apk_builds", apkName)
        }
    }

    variantFilter { variant ->
        def needed = variant.name in [
                'dev',
                'prod'
        ]
        variant.setIgnore(!needed)
    }
}

dependencies {
    implementation project(':features')
    implementation project(':core-di')
    implementation project(':core-network-api')
    implementation project(':core-network-impl')
    implementation project(':core-api-impl')
    implementation project(':core-domain-api')
    implementation project(':core-domain-impl')
    implementation project(':core-data-api')
    implementation project(':core-data-impl')

    deps.groups.ui dependencies
    deps.groups.injection dependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}